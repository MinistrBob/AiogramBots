from aiogram import Bot
from aiogram.types import CallbackQuery
import random
import psycopg2


async def get_yes(answer: CallbackQuery, bot: Bot, conn):
    key = random.choice(list(gifts_list.keys()))
    await answer.answer()
    await answer.message.answer(
        f"–ò –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–∑...\n\n<b>{key}</b>\n{gifts_list[key]}\n\n"
        f"*—á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ —á–∞—Ç @pims_tea")
    try:
        # Create the table (if not exists)
        with conn.cursor() as cursor:
            print(
                f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {answer.message.chat.id}|"
                f"{answer.message.chat.first_name}|"
                f"{answer.message.chat.last_name} –≤ —Ç–∞–±–ª–∏—Ü—É users")
            sql_text = """INSERT INTO users (chat_id, first_name, last_name) VALUES (%s, %s, %s) RETURNING id;"""
            values_tuple = (answer.message.chat.id,
                            answer.message.chat.first_name,
                            answer.message.chat.last_name)
            print(cursor.mogrify(sql_text, values_tuple))
            cursor.execute(sql_text, values_tuple)
            _id = cursor.fetchone()[0]
            conn.commit()
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å id {_id}')
    except psycopg2.errors.UniqueViolation as e:
        print(f"[ERROR]: –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å")


async def get_no(answer: CallbackQuery, bot: Bot):
    await answer.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∏ <a href='https://www.google.com/'>–¥–æ–±–∞–≤–ª—è–π</a> –≤ walletüëõ")
    await answer.answer()


gifts_list = {
    "–¢–∞–ø–∏–æ–∫–∞": "–í—Å–µ–º —Ç–∞–ø–∏–æ–∫–∞! –ó–∞–±–∏—Ä–∞–π —Ç–∞–ø–∏–æ–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫!",
    "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫—ç—à–±–µ–∫": "–ü–µ–π –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ —Å –¥–≤–æ–π–Ω—ã–º –∫—ç—à–±–µ–∫–æ–º –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞!",
    "–ú–µ—Ä—á –¢–≤–∏–Ω–±–∏": "–ü–æ–∫–∞ –∫—Ç–æ-—Ç–æ –∏—â–µ—Ç –ª—é–±–æ–≤—å –Ω–∞ —É–ª–∏—Ü–∞—Ö –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤, –º—ã –Ω–∞—à–ª–∏ –µ—ë –Ω–∞ Twinbyüíô –î–∞—Ä–∏–º –º–µ—Ä—á, "
                   "–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –¥—Ä—É–∂–±—É –∏ –ª—é–±–æ–≤—å!",
    "–ú–æ–ª–æ–∫–æ": "–ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ ‚Äì —ç—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞ –±–æ–≥–∞—Ç–æ–º. –ü–µ–π PIMS –Ω–∞ –ª—é–±–æ–º –º–æ–ª–æ–∫–µ –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ –±–µ–∑ –¥–æ–ø–ª–∞—Ç!",
    "–ù–∞—Å—Ç—è –ì–∞–ª–∞–∫—Å": "–õ–æ–≤–∏ –ª—é–±–∏–º—ã–π PIMS –ù–∞—Å—Ç–∏ –ì–∞–ª–∞–∫—Å Berries x Berries —Å –¥–≤–æ–π–Ω—ã–º –∫—ç—à–±–µ–∫–æ–º –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞üî•",
    "–†–æ–∑–∞ –§–µ—Å—Ç": "Psss...–æ—Ç–∫—Ä–æ–µ–º —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç! –ú—ã —Å–æ–∑–¥–∞–ª–∏ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –†–æ–∑–∞–§–µ—Å—Ç, –∏ —Ç—ã –µ–≥–æ –ø–æ–ø—Ä–æ–±—É–µ—à—å "
                 "–ø–µ—Ä–≤—ã–º! –ü–æ–∫—É–ø–∞–π –±–∏–ª–µ—Ç—ã –∏ —Å–æ–±–∏—Ä–∞–π –≤–µ—â–∏, –º—ã –¥–∞—Ä–∏–º —Ç–µ–±–µ –ø—Ä–æ—Ö–æ–¥–∫—É –Ω–∞ –†–æ–∑–∞–§–µ—Å—Ç –≤ –°–æ—á–∏!üèîÔ∏è",
    "–¢–∞—à–∞": "–£—Å—Ç–∞–ª –ª–∏—Å—Ç–∞—Ç—å –ø–∏–Ω—Ç–µ—Ä–µ—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π –∑–∞—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω? –ú—ã —Å –¢–∞—à–µ–π —Å–æ–∑–¥–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ "
            "–≤–æ–ª–ø–µ–π–ø–µ—Ä—ã —Å–µ–∑–æ–Ω–∞, <a href='https://drive.google.com/drive/folders/1aPlpbBHs5bueJSCiGdxDpCIQE9RVHvp4?usp"
            "=sharing'>–∑–∞–±–∏—Ä–∞–π</a>",
    "Sortage": "¬´–°—Ç–∏–ª—å–Ω–æ, –º–æ–¥–Ω–æ, –º–æ–ª–æ–¥—ë–∂–Ω–æ¬ª ‚Äì —ç—Ç–æ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –° —ç—Ç–æ–≥–æ –¥–Ω—è —Ç–≤–æ—ë –≤—Ç–æ—Ä–æ–µ –∏–º—è ‚Äì —Ñ—ç—à–Ω. –ù–∞—à –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è "
               "—Ç–µ–±—è —à–º–æ—Ç –æ—Ç OMANKOüò±",
    "–ù–∞ —à—É–º–µ": "–í–∞—Å –ø–æ—Å–µ—Ç–∏–ª–∞ –ø–æ–ª–∏—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –æ–±–æ–π–¥—ë–º—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º! –ò –¥–∞—Ä–∏–º <a "
               "href='https://music.apple.com/ru/playlist/%D0%BD%D0%B0-%D1%88%D1%83%D0%BC%D0%B5-%D0%B4%D0%BB%D1%8F"
               "-pims/pl.u-Zmblx9rU0Ao1dbg'>–º—É–∑—ã–∫–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É</a> –ù–ê–®–£–ú–ïüéß",
}

if __name__ == "__main__":
    # print(random.randint(0, 8))

    key = random.choice(list(gifts_list.keys()))
    print(key, gifts_list[key])
